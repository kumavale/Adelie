struct Rectangle {
    width: i32,
    height: i32,
    point: Point
}
struct Point {
    x: i32,
    y: i32,
}
impl Rectangle {
    fn new() -> Rectangle { Rectangle { 1, 2, Point { 3, 4 } } }
    fn print_ok() { println!("ok"); }
    fn max(&self, a: i32, b: i32,) -> i32 { if a > b { a } else { b } }
    fn min(a: i32, b: i32,) -> i32 { if a < b { a } else { b } }
    fn area(&self) -> i32 { self.width * self.height }
    //fn area2(this: &Self) -> i32 { this.width * this.height }
    fn update(&mut self, w: i32, h: i32) { self.width = w; self.height = h; }
    fn assign_param(mut a: i32) -> i32 { a = 3; a }
}
fn main() {
    let mut rect: Rectangle = Rectangle { 30, 50, Point { 128, 255 } };
    rect.width = 42;
    rect.point.x = 64;
    assert!(rect.width == 42 && rect.height == 50 && rect.point.x == 64 && rect.point.y == 255);
    assert_eq!(6, rect.max(3, 6));
    assert_eq!(3, Rectangle::min(3, 6));
    assert_eq!(2100, rect.area());
    //assert_eq!(2100, rect.area2());
    let mut rect2: Rectangle = Rectangle::new();
    assert!(rect2.width == 1 && rect2.height == 2 && rect2.point.x == 3 && rect2.point.y == 4);

    rect2.update(5, 6);
    assert!(rect2.width == 5 && rect2.height == 6);
    assert_eq!(3, Rectangle::assign_param(2));

    // should compile error
    // let r: Rectangle; r.width;
    // let p: Point=Point{1,2}; p.x=1;
    // rect.max(); rect.max(1); rect.max(1, 2, 3);
    // Rectangle::min(); Rectangle::min(1); Rectangle::min(1, 2, 3);

    Rectangle::print_ok();
}
