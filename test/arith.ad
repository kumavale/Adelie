fn one() -> i32 { return 1; 2; 3; }
fn two() -> i32 { 1; return 2; 3; }
fn three() -> i32 { 1; 2; return 3; }
fn ret3() -> i32 { return 3; }
fn plus(a: i32, b: i32) -> i32 { return a+b; }
fn add6(a:i32, b:i32, c:i32, d:i32, e:i32, f:i32) -> i32 { return a+b+c+d+e+f; }
fn fib(x: i32) -> i32 { if x<=1 { return 1; } else { return fib(x-1)+fib(x-2); } }
fn swap(x: &i32, y: &i32) { let tmp:i32=*x; *x=*y; *y=tmp; }
fn loop_return() -> i32 { let x: i32 = 3; loop { return x + 2; } }
fn main() {
    assert_eq!( 0, 0);
    assert_eq!(42, 42);
    assert_eq!(21, 5+20-4);
    assert_eq!(41, 12 + 34 - 5);
    assert_eq!(47, 5+6*7);
    assert_eq!(15, 5*(9-6));
    assert_eq!( 4, (3+5)/2);
    assert_eq!(10, -10+20);
    assert_eq!(10, - -10);

    assert_eq!(false, 0==1);
    assert_eq!( true, 42==42);
    assert_eq!( true, 0!=1);
    assert_eq!(false, 42!=42);

    assert_eq!( true, 0<1);
    assert_eq!(false, 1<1);
    assert_eq!(false, 2<1);
    assert_eq!( true, 0<=1);
    assert_eq!( true, 1<=1);
    assert_eq!(false, 2<=1);

    assert_eq!( true, 1>0);
    assert_eq!(false, 1>1);
    assert_eq!(false, 1>2);
    assert_eq!( true, 1>=0);
    assert_eq!( true, 1>=1);
    assert_eq!(false, 1>=2);

    assert_eq!(1, one());
    assert_eq!(2, two());
    assert_eq!(3, three());

    assert_eq!(3, { let a : i32 = 3; a });
    assert_eq!(8, { let a: i32=3; let b: i32=5; a+b });
    assert_eq!(7, { let a: i32=2; a+=5; a });
    assert_eq!(3, { let a: i32=5; a-=2; a });
    assert_eq!(6, { let a: i32=3; a*=2; a });
    assert_eq!(3, { let a: i32=6; a/=2; a });
    assert_eq!(3, { let a: i32=7; a%=4; a });
    assert_eq!(9, { let a: i32=2; a+=5+2; a });
    assert_eq!(8, { let a: i32=2; a+=3*2; a });
    assert_eq!(3, { let a: i32=9; a+=-3*2; a });
    assert_eq!(3, { let foo: i32; foo=3; foo });
    assert_eq!(8, { let foo_123: i32=3; let bar: i32=5; foo_123+bar });
    assert_eq!(1, { let f1: i32=-1; let f2: i32=2; f1+f2 });
    assert_eq!(3, { let A: i32=1; let _B: i32=2; let c99: i32=A+_B; c99 });

    assert_eq!( 5, { let i: i32=5; let j: i32=0; while i>0 { j+=1; i-=1; } j });
    assert_eq!( 1, { while 1==0 { return 0; } 1 });
    assert_eq!(55, { let i: i32=0; let j: i32=0; while i<=10 { j=i+j; i+=1; } j });

    assert_eq!( 3, ret3());
    assert_eq!( 5, ret5());
    assert_eq!( 7, plus(3, 4));
    assert_eq!( 7, plus(plus(1, 2), 4));
    assert_eq!(10, plus(plus(1, plus(2, 3)), 4));
    assert_eq!(66, add6(1,2,add6(3,4,5,6,7,8),9,10,11));
    assert_eq!(55, fib(9));

    assert_eq!(42, if 1==1 { let a:i32=42; if 1==1 { let a:i32=3; } a } else {0});
    assert_eq!(42, { let a:i32=if true { 42 } else { 21 }; a });

    assert_eq!(-42, -42);
    assert_eq!(-43, !42);
    assert_eq!(true, !false);
    assert_eq!(false, !true);
    assert_eq!(true, !!true);

    assert_eq!( 0,  0&1);
    assert_eq!( 1,  3&1);
    assert_eq!( 3,  7&3);
    assert_eq!(10, -1&10);
    assert_eq!( 1,  0|1);
    assert_eq!(19, 16|3);
    assert_eq!( 0,  0^0);
    assert_eq!( 0, 15^15);

    assert_eq!( 2, { let i:i32= 6; i&=3; i });
    assert_eq!( 7, { let i:i32= 6; i|=3; i });
    assert_eq!(10, { let i:i32=15; i^=5; i });

    assert_eq!(3, { let x:i32=3; *&x });
    assert_eq!(3, { let x:i32=3; let y:&i32=&x; let z:&&i32=&y; **z });
    assert_eq!(3, { let a:i32=3;let b:&i32=&a;let c:&&i32=&b;let d:&&&i32=&c;let e:&&&&i32=&d; ****e });
    assert_eq!(5, { let x:i32=3; let y:&i32=&x; *y=5; x });
    assert_eq!(3, { let x:i32=3; let y:i32=5; swap(&x, &y); y });
    assert_eq!(5, { let x:i32=3; let y:i32=5; swap(&x, &y); x });

    assert_eq!('a', { let a:char='a'; a });

    assert_eq!(1, { let a:i32=97; if a as char=='a' { 1 } else { 0 } });
    assert_eq!(1, { let a:char='a'; if a as i32==97 { 1 } else { 0 } });
    assert_eq!(1, { let a:bool=true; if a as i32==1{ 1 } else { 0 } });
    assert_eq!(0, { let a:bool=false; if a as i32==1{ 1 } else { 0 } });

    assert_eq!(5, loop_return());

    assert_eq!(false, false && true);
    assert_eq!(false,  true && (1==2) && true);
    assert_eq!(false,  true && false);
    assert_eq!( true,  true && true);
    assert_eq!( true,  true && (1==1));
    assert_eq!( true, false || true);
    assert_eq!( true, false || (1==2) || true);
    assert_eq!(false, false || false);
    assert_eq!(false, false || (1==2));

    assert_eq!( 1, 1<<0);
    assert_eq!( 8, 1<<3);
    assert_eq!(10, 5<<1);
    assert_eq!( 2, 5>>1);
    assert_eq!(-1, -1>>1);
    assert_eq!( 1, { let i:i32=1; i<<=0; i });
    assert_eq!( 8, { let i:i32=1; i<<=3; i });
    assert_eq!(10, { let i:i32=5; i<<=1; i });
    assert_eq!( 2, { let i:i32=5; i>>=1; i });
    assert_eq!(-1, { let i:i32=-1; i });
    assert_eq!(-1, { let i:i32=-1; i>>=1; i });

    assert_eq!(2, { let a:i32=1; let a:i32=2; a });

    assert_eq!(3, { let i:i32=0; while true{if i==3{break;}i+=1;}i });
    assert_eq!(3, { let i:i32=0; while true{while true{break;}if i==3{break;}i+=1;}i });
    assert_eq!(3, { let i:i32=0; loop{loop{break;}if i==3{break;}i+=1;}i });
    assert_eq!(3, { let i:i32=0; loop{while true{break;}if i==3{break;}i+=1;}i });
    assert_eq!(3, { let i:i32=0; while true{loop{break;}if i==3{break;}i+=1;}i });

    println!("ok");
}
fn ret5() -> i32 { return 5; }
