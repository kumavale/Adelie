fn ret3() -> i32 { return 3; }
fn plus(a: i32, b: i32) -> i32 { return a+b; }
fn add6(a:i32, b:i32, c:i32, d:i32, e:i32, f:i32) -> i32 { return a+b+c+d+e+f; }
fn fib(x: i32) -> i32 { if x<=1 { return 1; } else { return fib(x-1)+fib(x-2); } }
fn swap(x: &i32, y: &i32) { let tmp:i32=*x; *x=*y; *y=tmp; }
fn loop_return() -> i32 { let x: i32 = 3; loop { return x + 2; } }
fn main() {
    assert_eq!( 3, ret3());
    assert_eq!( 7, plus(3, 4));
    assert_eq!( 7, plus(plus(1, 2), 4));
    assert_eq!(10, plus(plus(1, plus(2, 3)), 4));
    assert_eq!(66, add6(1,2,add6(3,4,5,6,7,8),9,10,11));
    assert_eq!(55, fib(9));

    println!("ok");
}
